# See docs: https://embarkstudios.github.io/cargo-deny/checks/index.html
# Some inspiration is drawn from: https://github.com/hyperium/tonic/blob/master/deny.toml

[advisories]
vulnerability = "deny"
unmaintained = "deny"
yanked = "deny"
unsound = "deny"
ignore = [
    # Potential segfault in chrono crate, no workarounds
    # Original error message:
    #     ### Impact
    #
    #     Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.
    #
    #     ### Workarounds
    #
    #     No workarounds are known.
    #
    #     ### References
    #
    #     - [time-rs/time#293](https://github.com/time-rs/time/issues/293)
    "RUSTSEC-2020-0159",
    # The same potential segfault in time crate.
    # Original error message:
    #      Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.
    #      The affected functions from time 0.2.7 through 0.2.22 are:
    #
    #      - `time::UtcOffset::local_offset_at`
    #      - `time::UtcOffset::try_local_offset_at`
    #      - `time::UtcOffset::current_local_offset`
    #      - `time::UtcOffset::try_current_local_offset`
    #      - `time::OffsetDateTime::now_local`
    #      - `time::OffsetDateTime::try_now_local`
    #
    #      The affected functions in time 0.1 (all versions) are:
    #
    #      - `at`
    #      - `at_utc`
    #
    #      Non-Unix targets (including Windows and wasm) are unaffected.
    #
    #      ### Patches
    #
    #      Pending a proper fix, the internal method that determines the local offset has been modified to always return `None` on the affected operating systems. This has the effect of returning an `Err` on the `try_*` methods and `UTC` on the non-`try_*` methods.
    #
    #      Users and library authors with time in their dependency tree should perform `cargo update`, which will pull in the updated, unaffected code.
    #
    #      Users of time 0.1 do not have a patch and should upgrade to an unaffected version: time 0.2.23 or greater or the 0.3. series.
    #
    #      ### Workarounds
    #
    #      No workarounds are known.
    #
    #      ### References
    #
    #      time-rs/time#293
    "RUSTSEC-2020-0071",
]

# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "deny"

# severity-threshold = "None" | "Low" | "Medium" | "High" | "Critical"

[bans]
# This lint issues false-positives for `{ path = "foo/bar" }` dependencies
# FIXME: make it "deny" once this bug is fixed:
# https://github.com/EmbarkStudios/cargo-deny/issues/241
wildcards = "allow"

multiple-versions = "deny"
# FIXME: deduplicate dependencies
skip = [
    # That's dependence of clap v2.33.3. Need wait for update
    { name = "strsim", version = "=0.8" },
    # `config` and `nom` crates use the old version of this crate
    { name = "arrayvec", version = "0.5.2" },
    # { name = "crate_name_here", version = "=0.11.0" },

    { name = "itoa", version = "=0.4.8" },
    { name = "parking_lot", version = "=0.11.2" },
    { name = "parking_lot_core", version = "=0.8.5" },

    # Transitive `backtrace` crate uses older version
    { name = "miniz_oxide", version = "=0.4.4" }
]
# Skips the entire tree of the crate dependencies:
skip-tree = [
    # { name = "crate_name_here", version = "=0.11.0", depth = 20 },

    # Cheburashka 2 again
    { name = "pin-project", version = "0.4.*", depth = 20 },
]
deny = []

[sources]
unknown-registry = "warn"
unknown-git = "deny"
allow-registry = [
    "https://github.com/rust-lang/crates.io-index",
    "https://dl.cloudsmith.io/basic/elastio/private/cargo/index.git"
]
allow-git = [
]

[licenses]
unlicensed = "deny"
copyleft = "deny"
private = { ignore = true }

# run `cargo deny list` to see which crates use which license
allow = [
    "MIT",
    "BSD-3-Clause",
    "BSD-2-Clause",
    "Unlicense",
    "Apache-2.0",
    "CC0-1.0",
    "Zlib",
    "ISC",
    "OpenSSL",
    # (c) @anelson:
    # I'm okay with it (MPL-2.0 license) because of this:
    #
    # > However, a larger work using the licensed work may be distributed under
    # > different terms and without source code for files added in the larger work.
    #
    # So if we modify this crate's code, we must release that code, which is why
    # it's "copyleft".
    # But that copyleft license doesn't contaminate the rest of the code that
    # just links with the MPL code. So we can add MPL 2 to the approved license list
    "MPL-2.0",
]
deny = []
default = "deny"
allow-osi-fsf-free = "neither"

# We want really high confidence when inferring licenses from text
confidence-threshold = 0.92

[[licenses.clarify]]
name = "stream-vbyte"
version = "0.3.2"
# This is in fact `Copyfree Open Innovation License` but it seems there is no SPDX expression for it
# https://bitbucket.org/marshallpierce/stream-vbyte-rust/src/master/LICENSE.txt
expression = "Unlicense"
license-files = [
    # license file hash was taken from the error message
    { path = "LICENSE.txt", hash = 0x508d93ea }
]

[[licenses.clarify]]
# This crate has a low-confidence license inference score (0.85), so clarifying manually...
# This PR should fix low-confidence score: https://github.com/briansmith/webpki/pull/128
# The maintainer just needs some time to pay attention to it
name = "webpki"
version = "0.21.3"
expression = "ISC"
license-files = [
    { path = "LICENSE", hash = 0x001c7e6c }
]

[[licenses.clarify]]
name = "ring"
version = "0.16.15"
# Copied this expression from the comment of Jake-Shadle (maintainer of cargo-deny)
# https://github.com/EmbarkStudios/cargo-deny/issues/110#issuecomment-576173641
# The issue under ring repo:
# https://github.com/briansmith/ring/issues/902
expression = "ISC AND MIT AND OpenSSL"
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 },
]

# Copied from https://github.com/hsivonen/encoding_rs/blob/b73366a/README.md#licensing
[[licenses.clarify]]
name = "encoding_rs"
version = "*"
expression = "(Apache-2.0 OR MIT) AND BSD-3-Clause"
license-files = [
    { path = "COPYRIGHT", hash = 0x39f8ad31 }
]
