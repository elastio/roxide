# See docs: https://embarkstudios.github.io/cargo-deny/checks/index.html
# Some inspiration is drawn from: https://github.com/hyperium/tonic/blob/master/deny.toml

[advisories]
vulnerability = "deny"
unmaintained = "deny"
yanked = "deny"
unsound = "deny"
ignore = [
    # This crate is pervasive throughout our dependency tree ecosystem,
    # we can only wait until the world migrates to something maintained
    #
    # Original error message:
    # The [`net2`](https://crates.io/crates/net2) crate has been deprecated
    # and users are encouraged to considered [`socket2`](https://crates.io/crates/socket2) instead.
    "RUSTSEC-2020-0016",

    # The blockers for getting rid of `failure` are `lambda_runtime_core v0.1.2` and
    # `which v3.1.1`.
    #
    # Original error message:
    # The `failure` crate is officially end-of-life: it has been marked as deprecated
    # by the former maintainer, who has announced that there will be no updates or
    # maintenance work on it going forward.
    "RUSTSEC-2020-0036",

    # `time` crate depends on `stdweb` crate. We need to wait for
    # when `time` crate will be updated
    #
    # Original error message:
    # The author of the `stdweb` crate is unresponsive.
    "RUSTSEC-2020-0056",

    # `volk`, `elastio` and `s0` crates depend on `pretty_assertions` which depend on `difference` crate.
    # We need to wait when `difference` crate will be updated
    #
    # Original error message:
    # The author of the `difference` crate is unresponsive.
    #
    # Maintained alternatives:
    #   - [`pretty_assertions`](https://crates.io/crates/pretty_assertions)
    #   - [`dissimilar`](https://crates.io/crates/dissimilar)
    #   - [`treediff`](https://crates.io/crates/treediff)
    #   - [`diffus`](https://crates.io/crates/diffus)
    "RUSTSEC-2020-0095",

    # We don't manually implement that anywhere, that would be ridiculous
    # Anyway we should get rid of `failure` crate in our dependency tree
    #
    # Original error message:
    # Safe Rust code can implement malfunctioning `__private_get_type_id__` and cause
    # type confusion when downcasting, which is an undefined behavior.
    #
    # Users who derive `Fail` trait are not affected.
    "RUSTSEC-2019-0036",


    # We don't use `lock_api` crate directly. This old version with the vulnerability
    # is included thru the old lambda runtime crate. We should update it anyway...
    #
    # Original error message:
    # Affected versions of lock_api had unsound implementations of the `Send` or
    # `Sync` traits for some guard objects, namely:
    #
    # * MappedMutexGuard
    # * MappedRwLockReadGuard
    # * MappedRwLockWriteGuard
    # * RwLockReadGuard
    # * RwLockWriteGuard
    #
    # These guards could allow data races through types that are not safe to `Send`
    # across thread boundaries in safe Rust code.
    #
    # This issue was fixed by changing the trait bounds on the `Mapped` guard types
    # and removing the `Sync` trait for the `RwLock` guards.
    "RUSTSEC-2020-0070",

    # `viy` crate depends on `mft` 0.5.3 which depends on `simplelog` 0.7.6
    # which depends on `term` 0.6.1 which in unmaintained.
    # Original error message:
    # The author of the `term` crate does not have time to maintain it and is looking
    # for a new maintainer.
    #
    # Some maintained alternatives you can potentially switch to instead, depending
    # on your needs:
    #
    #   - [`crossterm`](https://github.com/crossterm-rs/crossterm)
    #   - [`termcolor`](https://crates.io/crates/termcolor)
    #   - [`yansi`](https://crates.io/crates/yansi)
    "RUSTSEC-2018-0015",
]

# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "deny"

# severity-threshold = "None" | "Low" | "Medium" | "High" | "Critical"

[bans]
# This lint issues false-positives for `{ path = "foo/bar" }` dependencies
# FIXME: make it "deny" once this bug is fixed:
# https://github.com/EmbarkStudios/cargo-deny/issues/241
wildcards = "allow"

multiple-versions = "deny"
# FIXME: deduplicate dependencies
skip = [
    # cheburashka 2 still uses the old version
    { name = "darling", version = "0.12.*" },
    { name = "darling_macro", version = "0.12.*" },
    { name = "darling_core", version = "0.12.*" },

    # `config` and `nom` crates use the old version of this crate
    { name = "arrayvec", version = "0.5.2" },

    # clap uses this old version, and cheburashka uses clap
    { name = "ansi_term", version = "0.11.*" },
    # { name = "crate_name_here", version = "=0.11.0" },
]
# Skips the entire tree of the crate dependencies:
skip-tree = [
    # { name = "crate_name_here", version = "=0.11.0", depth = 20 },

    # Cheburashka 2 still uses darling 0.12
    { name = "darling", version = "0.12.*", depth = 20 },

    # Cheburashka 2 again
    { name = "pin-project", version = "0.4.*", depth = 20 },
]
deny = [
    # color-backtrace is nice but brings in too many dependencies and that are often outdated, so not worth it for us.
    { name = "color-backtrace" },

    # This constraint was taken from `tonic` deny.toml, but we do use `dirs`
    # FIXME: remove dirs dependency (btw its repo was suddenly archived for no reason and explanation)
    # https://www.reddit.com/r/rust/comments/ga7f56/why_dirs_and_directories_repositories_have_been/
    # dirs crate has a lot of dependencies and there are better alternatives
    # { name = "dirs" },
    # { name = "dirs-sys" },

    # deprecated
    { name = "quickersort" },
]

[sources]
unknown-registry = "warn"
unknown-git = "deny"
allow-registry = [
    "https://github.com/rust-lang/crates.io-index",
    "https://dl.cloudsmith.io/basic/elastio/private/cargo/index.git"
]
allow-git = [
]

[licenses]
unlicensed = "deny"
copyleft = "deny"
private = { ignore = true }

# run `cargo deny list` to see which crates use which license
allow = [
    "MIT",
    "BSD-3-Clause",
    "BSD-2-Clause",
    "Unlicense",
    "Apache-2.0",
    "CC0-1.0",
    "Zlib",
    "ISC",
    "OpenSSL",
    # (c) @anelson:
    # I'm okay with it (MPL-2.0 license) because of this:
    #
    # > However, a larger work using the licensed work may be distributed under
    # > different terms and without source code for files added in the larger work.
    #
    # So if we modify this crate's code, we must release that code, which is why
    # it's "copyleft".
    # But that copyleft license doesn't contaminate the rest of the code that
    # just links with the MPL code. So we can add MPL 2 to the approved license list
    "MPL-2.0",
]
deny = []
default = "deny"
allow-osi-fsf-free = "neither"

# We want really high confidence when inferring licenses from text
confidence-threshold = 0.92

[[licenses.clarify]]
name = "stream-vbyte"
version = "0.3.2"
# This is in fact `Copyfree Open Innovation License` but it seems there is no SPDX expression for it
# https://bitbucket.org/marshallpierce/stream-vbyte-rust/src/master/LICENSE.txt
expression = "Unlicense"
license-files = [
    # license file hash was taken from the error message
    { path = "LICENSE.txt", hash = 0x508d93ea }
]

[[licenses.clarify]]
# This crate has a low-confidence license inference score (0.85), so clarifying manually...
# This PR should fix low-confidence score: https://github.com/briansmith/webpki/pull/128
# The maintainer just needs some time to pay attention to it
name = "webpki"
version = "0.21.3"
expression = "ISC"
license-files = [
    { path = "LICENSE", hash = 0x001c7e6c }
]
[[licenses.clarify]]
name = "ring"
version = "0.16.15"
# Copied this expression from the comment of Jake-Shadle (maintainer of cargo-deny)
# https://github.com/EmbarkStudios/cargo-deny/issues/110#issuecomment-576173641
# The issue under ring repo:
# https://github.com/briansmith/ring/issues/902
expression = "ISC AND MIT AND OpenSSL"
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 },
]
