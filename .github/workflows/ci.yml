
name: ci
on:
  pull_request:
  push:
    # `staging` and `trying` are required for bors
    branches: [master, staging, trying]

env:
  # Just a reassurance to mitigate sudden network connection problems
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: full

  # We don't need any debug symbols on ci, this also speeds up builds a bunch
  RUSTFLAGS: --deny warnings -Cdebuginfo=0
  RUSTDOCFLAGS: --deny warnings

  CARGO_REGISTRIES_ELASTIO_PRIVATE_INDEX: ${{ secrets.PRIVATE_REGISTRY_TOKEN_URL }}
  CARGO_REGISTRIES_ELASTIO_PRIVATE_TOKEN: ${{ secrets.CLOUDSMITH_API_TOKEN }}

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/master' }}
    timeout-minutes: 3

    steps:
      - uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  cargo-deny-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}

  rust-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt, clippy

      - run: cargo fmt --all -- --check
      - run: cargo doc --workspace --no-deps
      - run: cargo clippy --workspace --all-targets --all-features

  rust-test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # Note: Windows builds don't work currently because `clang` isn't
        # installed so `bindgen` fails
        #
        # We dont' care about RocksDB on Windows anyway so i didn't bother
        # trying to get it working
        #
        # On macOS there was some duplicate symbol error from the linker for
        # `crc32c_runtime_check` which, again, I didn't bother to run down
        # because we don't care about Rocks on macOS
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - run: cargo test --workspace --no-run
      - run: cargo test --workspace

  rust-code-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [nightly]
    env:
      RUSTFLAGS: '-Zinstrument-coverage'
      LLVM_PROFILE_FILE: "${{ github.workspace }}/coverage-%p-%m.profraw"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - run: |
          cargo +${{ matrix.toolchain }} test --workspace --all-targets --all-features
          find . -name "*.profraw"

      - name: Install grcov
        run: |
          rustup component add llvm-tools-preview
          curl -L https://github.com/mozilla/grcov/releases/download/v0.7.1/grcov-linux-x86_64.tar.bz2 | tar jxf -

      - name: Run grcov
        run: |
          # The `--ignore /*` exclues from coverage analysis anything in a cargo crate (meaning includes only this repo)
          #
          # without that the `lcov.info` file will be 10s of MB and the shitty Node.js Coveralls importer will eat shit and die
          ./grcov . --binary-path ./target/debug/ -t lcov -s . -o ./lcov.info  --branch --ignore-not-existing --ignore "/*"

          # These commands help with debugging if coveralls ingest is failing
          #file ./lcov.info
          #du -h ./lcov.info
          #head --bytes 10240 ./lcov.info
          #cat ./lcov.info | grep SF:

          # There's a compiled binary coveralls reporter which seems like someone's shitty side project
          # It's written in Crystal, and seems to be very flaky.  However maybe in the future it'll be more mature
          # and work better than the half-hearted Github Action which itself seems barely maintained
          #wget -cq https://coveralls.io/coveralls-linux.tar.gz -O - | tar -xz
          #./coveralls -f./lcov.info || echo coveralls shat the bed


      - name: Upload code coverage info
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "${{ github.workspace }}/lcov.info"

  # If the build passes on `master`, publish the crates with a `-dev` pre-release version
  # to cloudsmith.
  #
  # Real production releases are handled by the `release.yml` workflow
  publish-crates:
    # Publishing happens only on pushes to master. Other branches and PRs don't count
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    # This job must execute only if all checks pass!
    needs:
      - cargo-deny-check
      - rust-lint
      - rust-test

    env:
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_TOKEN }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      # Install cloudsmith CLI via pip
      - uses: actions/setup-python@v1
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            cloudsmith-cli

      - run: cargo install --registry elastio-private xtask-core --bin cargo-xelastio --force

      # Perform the actual release operations
      - run: cargo xelastio publish master

